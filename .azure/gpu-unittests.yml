# Create and test a Python package on multiple PyTorch versions.

trigger:
  tags:
    include:
      - "*"
  branches:
    include:
      - master
      - release/*
      - refs/tags/*
pr:
  - master
  - release/*

jobs:
  - job: unitest_GPU
    strategy:
      matrix:
        "PyTorch | old":
          # Torch does not have build wheels with old Torch versions for newer CUDA
          docker-image: "pytorchlightning/torchmetrics:ubuntu20.04-cuda11.1.1-py3.8-torch1.8.1"
          agent-pool: "lit-rtx-3090"
          torch-ver: "1.8.1"
        "PyTorch | 1.X":
          docker-image: "pytorchlightning/torchmetrics:ubuntu22.04-cuda11.8.0-py3.9-torch1.13"
          agent-pool: "lit-rtx-3090"
          torch-ver: "1.13.1"
        "PyTorch | 2.X":
          docker-image: "pytorchlightning/torchmetrics:ubuntu22.04-cuda11.8.0-py3.10-torch2.0"
          agent-pool: "lit-rtx-3090"
          torch-ver: "2.0.1"
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "120"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"

    pool: "$(agent-pool)"

    variables:
      DEVICES: $( python -c 'name = "$(Agent.Name)" ; gpus = name.split("_")[-1] if "_" in name else "0,1"; print(gpus)' )
      # these two caches assume to run repetitively on the same set of machines
      #  see: https://github.com/microsoft/azure-pipelines-agent/issues/4113#issuecomment-1439241481
      TORCH_HOME: "/var/tmp/torch"
      TRANSFORMERS_CACHE: "/var/tmp/huggingface"
      PIP_CACHE_DIR: "/var/tmp/pip"
      # MKL_THREADING_LAYER: "GNU"
      MKL_SERVICE_FORCE_INTEL: 1
      # todo: consider unfreeze for master too
      FREEZE_REQUIREMENTS: 1

    container:
      image: "$(docker-image)"
      options: "--gpus=all --shm-size=8g -v /var/tmp:/var/tmp"

    workspace:
      clean: all

    steps:
      - bash: |
          echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
          CUDA_version=$(nvcc --version | sed -n 's/^.*release \([0-9]\+\.[0-9]\+\).*$/\1/p')
          CUDA_version_mm="${CUDA_version//'.'/''}"
          echo "##vso[task.setvariable variable=CUDA_VERSION_MM]$CUDA_version_mm"
          echo "##vso[task.setvariable variable=TORCH_URL]https://download.pytorch.org/whl/cu${CUDA_version_mm}/torch_stable.html"
        displayName: "set Env. vars"

      - bash: |
          whoami && id
          lspci | egrep 'VGA|3D'
          whereis nvidia
          nvidia-smi
          echo $CUDA_VISIBLE_DEVICES
          echo $TORCH_URL
          python --version
          pip --version
          pip cache dir
          pip list
        displayName: "Image info & NVIDIA"

      - bash: |
          pip install -q packaging
          wget https://raw.githubusercontent.com/Lightning-AI/utilities/main/scripts/adjust-torch-versions.py
          python adjust-torch-versions.py requirements.txt $(torch-ver)
          for fpath in `ls requirements/*.txt`; do
              python adjust-torch-versions.py $fpath $(torch-ver)
          done
        # FixMe: missing setting minumal configurations for testing
        displayName: "Adjust versions"

      - bash: |
          pip install . -U -r ./requirements/devel.txt --prefer-binary --find-links=${TORCH_URL}
        displayName: "Install environment"

      - bash: |
          set -e
          pip list
          python -c "from torch import __version__ as ver ; assert str(ver).split('+')[0] == '$(torch-ver)', f'PyTorch: {ver}'"
          python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu >= 2, f'found GPUs: {mgpu}'"
        displayName: "Sanity check"

      - bash: |
          printf "cache location: $(TORCH_HOME)\n"
          mkdir -p $(TORCH_HOME)  # in case cache was void
          ls -lh $(TORCH_HOME)
          printf "cache location: $(TRANSFORMERS_CACHE)\n"
          mkdir -p $(TRANSFORMERS_CACHE)  # in case cache was void
          ls -lh $(TRANSFORMERS_CACHE)
        displayName: "Show caches"

      - bash: |
          python -m pytest torchmetrics --cov=torchmetrics \
            --timeout=240 --durations=50 \
            --numprocesses=5 --dist=loadfile
        env:
          DOCTEST_DOWNLOAD_TIMEOUT: "120"
          SKIP_SLOW_DOCTEST: "1"
        workingDirectory: src
        displayName: "DocTesting"

      - bash: |
          wget https://pl-public-data.s3.amazonaws.com/metrics/data.zip
          unzip -o data.zip
          ls -l _data/*
        workingDirectory: tests
        displayName: "Pull testing data from S3"

      - bash: python -m pytest unittests -v --cov=torchmetrics --timeout=240 --durations=500 --tx 3*popen//python=python
        env:
          CUDA_LAUNCH_BLOCKING: "1"
        workingDirectory: tests
        displayName: "UnitTesting"

      - bash: |
          python -m coverage report
          python -m coverage xml
          python -m codecov --token=$(CODECOV_TOKEN) --name="GPU-coverage" \
            --commit=$(Build.SourceVersion) --flags=gpu,unittest --env=linux,azure
          ls -l
        workingDirectory: tests
        displayName: "Statistics"

      - bash: |
          set -e
          FILES="*.py"
          for fn in $FILES
          do
            echo "Processing $fn example..."
            python $fn
          done
        workingDirectory: examples
        displayName: "Examples"

      - bash: |
          printf "cache location: $(TRANSFORMERS_CACHE)\n"
          ls -lh $(TRANSFORMERS_CACHE)  # show what was restored...
        displayName: "Show HF artifacts"
