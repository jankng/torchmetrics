name: Unit-testing and Coverage
description: pull data samples -> unittests

inputs:
  python-version:
    description: Python version
    required: true
  pytorch-version:
    description: PyTorch version
    required: true
  codecov-token:
    description: Codecov token for upload results
    required: true
  requires:
    description: define oldest or latest
    required: false
    default: ""
  dirs:
    description: Testing folders per domains
    required: false
    default: "unittests"
  test-timeout:
    description: PyTest timeout
    required: false
    default: ""
  shell-type:
    description: Define Shell type
    required: false
    default: "bash"

runs:
  using: "composite"
  steps:
    - name: Details
      run: |
        pip --version
        pip list
      shell: ${{ inputs.shell-type }}

    - name: Pull testing data from S3
      working-directory: ./tests
      env:
        S3_DATA: "https://pl-public-data.s3.amazonaws.com/metrics/data.zip"
      run: |
        pip install -q "urllib3>1.0"
        # wget is simpler but does not work on Windows
        python -c "from urllib.request import urlretrieve ; urlretrieve('$S3_DATA', 'data.zip')"
        unzip -o data.zip
        ls -l _data/*
      shell: ${{ inputs.shell-type }}

    - name: Export README tests
      run: python -m phmdoctest README.md --outfile tests/unittests/test_readme.py
      shell: ${{ inputs.shell-type }}

    - name: Unittests
      working-directory: ./tests
      run: |
        python -m pytest -v \
          ${{ inputs.dirs }} \
          --cov=torchmetrics \
          --durations=50 \
          --reruns 3 \
          --reruns-delay 1 \
          -n auto \
          --dist=loadfile
          ${{ inputs.test-timeout }}
      shell: ${{ inputs.shell-type }}

    - name: Statistics
      if: success()
      working-directory: ./tests
      run: |
        coverage xml
        coverage report
      shell: ${{ inputs.shell-type }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ inputs.codecov-token }}
        file: tests/coverage.xml
        flags: cpu,${{ runner.os }},python${{ inputs.python-version }},torch${{ inputs.pytorch-version }}
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false
