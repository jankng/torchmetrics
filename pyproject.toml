[metadata]
license_file = "LICENSE"
description-file = "README.md"

[build-system]
requires = ["setuptools", "wheel"]


[tool.check-manifest]
ignore = ["*.yml", ".github", ".github/*"]


[tool.pytest.ini_options]
norecursedirs = [".git", ".github", "dist", "build", "docs"]
addopts = [
    "--strict-markers",
    "--doctest-modules",
    "--doctest-plus",
    "--color=yes",
    "--disable-pytest-warnings",
]
#filterwarnings = ["error::FutureWarning"] # ToDo
xfail_strict = true
junit_duration_report = "call"
[tool.coverage.report]
exclude_lines = ["pragma: no cover", "pass"]
[tool.coverage.run]
parallel = true
concurrency = "thread"
relative_files = true


[tool.black]
# https://github.com/psf/black
line-length = 120
exclude = "(.eggs|.git|.hg|.mypy_cache|.venv|_build|buck-out|build|dist)"

[tool.docformatter]
recursive = true
# some docstring start with r"""
wrap-summaries = 119
wrap-descriptions = 120
blank = true

[tool.codespell]
#skip = '*.py'
quiet-level = 3
# Todo: comma separated list of words; waiting for:
#  https://github.com/codespell-project/codespell/issues/2839#issuecomment-1731601603
# Todo: also adding links until they ignored by its: nature
#  https://github.com/codespell-project/codespell/issues/2243#issuecomment-1732019960
ignore-words-list = """
  rouge, \
  mape, \
  wil, \
  fpr, \
  raison, \
  archiv
"""

[tool.typos.default]
extend-ignore-identifiers-re = [
    # *sigh* this just isn't worth the cost of fixing
    "AttributeID.*Supress.*",
]

[tool.typos.default.extend-identifiers]
# *sigh* this just isn't worth the cost of fixing
MAPE = "MAPE"
WIL = "WIL"
Raison = "Raison"

[tool.typos.default.extend-words]
# Don't correct the surname "Teh"
fpr = "fpr"
mape = "mape"
wil = "wil"



[tool.ruff]
target-version = "py38"
line-length = 120
# Enable Pyflakes `E` and `F` codes by default.
select = [
    "E",
    "W", # see: https://pypi.org/project/pycodestyle
    "F", # see: https://pypi.org/project/pyflakes
    "I", #see: https://pypi.org/project/isort/
    "D", # see: https://pypi.org/project/pydocstyle
    "N", # see: https://pypi.org/project/pep8-naming
    "S", # see: https://pypi.org/project/flake8-bandit
]
extend-select = [
    "A",    # see: https://pypi.org/project/flake8-builtins
    "B",    # see: https://pypi.org/project/flake8-bugbear
    "C4",   # see: https://pypi.org/project/flake8-comprehensions
    "PT",   # see: https://pypi.org/project/flake8-pytest-style
    "RET",  # see: https://pypi.org/project/flake8-return
    "SIM",  # see: https://pypi.org/project/flake8-simplify
    "YTT",  # see: https://pypi.org/project/flake8-2020
    "ANN",  # see: https://pypi.org/project/flake8-annotations
    "TID",  # see: https://pypi.org/project/flake8-tidy-imports/
    "T10",  # see: https://pypi.org/project/flake8-debugger
    "Q",    # see: https://pypi.org/project/flake8-quotes
    "RUF",  # Ruff-specific rules
    "EXE",  # see: https://pypi.org/project/flake8-executable
    "ISC",  # see: https://pypi.org/project/flake8-implicit-str-concat
    "PIE",  # see: https://pypi.org/project/flake8-pie
    "PLE",  # see: https://pypi.org/project/pylint/
    "PERF", # see: https://pypi.org/project/perflint/
    "PYI",  # see: https://pypi.org/project/flake8-pyi/
]
ignore = [
    "E731",   # Do not assign a lambda expression, use a def
    "D100",   # todo: Missing docstring in public module
    "D104",   # todo: Missing docstring in public package
    "D107",   # Missing docstring in `__init__`
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "S301",   # todo: `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue  # todo
    "S310",   # todo: Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.  # todo
    "B905",   # todo: `zip()` without an explicit `strict=` parameter
    "PYI024",  # todo: Use `typing.NamedTuple` instead of `collections.namedtuple`
    "PYI041",  # todo: Use `float` instead of `int | float``
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "docs",
]
ignore-init-module-imports = true
unfixable = ["F401"]

[tool.ruff.per-file-ignores]
"setup.py" = ["ANN202", "ANN401"]
"src/**" = ["ANN401"]
"tests/**" = ["S101", "ANN001", "ANN201", "ANN202", "ANN401"]

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

#[tool.ruff.pycodestyle]
#ignore-overlong-task-comments = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.mypy]
files = ["src/torchmetrics"]
install_types = "True"
non_interactive = "True"
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
show_error_codes = "True"
warn_redundant_casts = "True"
warn_unused_configs = "True"
warn_unused_ignores = "True"
allow_redefinition = "True"
# disable this rule as the Trainer attributes are defined in the connectors, not in its __init__
disable_error_code = "attr-defined"
# style choices
warn_no_return = "False"

# Ignore mypy errors for these files
# TODO: the goal is for this to be empty
[[tool.mypy.overrides]]
module = [
    "torchmetrics.classification.exact_match",
    "torchmetrics.classification.f_beta",
    "torchmetrics.classification.precision_recall",
    "torchmetrics.classification.ranking",
    "torchmetrics.classification.recall_at_fixed_precision",
    "torchmetrics.classification.roc",
    "torchmetrics.classification.stat_scores",
    "torchmetrics.detection._mean_ap",
    "torchmetrics.detection.mean_ap",
    "torchmetrics.functional.image.psnr",
    "torchmetrics.functional.image.ssim",
    "torchmetrics.image.psnr",
    "torchmetrics.image.ssim",
]
ignore_errors = "True"
